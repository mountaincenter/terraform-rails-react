name: "Terraform"

on:
  push:

env:
  OIDC_ARN: ${{ secrets.AWS_OIDC_ARN }}
  ECR_REGISTRY: 384657981262.dkr.ecr.ap-northeast-1.amazonaws.com
  ECR_REPOSITORY: "tf-app"
  APP: "tf-app"
  TF_VAR_tool: "terraform"
  TF_VAR_project: "tf-rails-fargate"
  TF_VAR_environment: "production"
  TF_VAR_aws_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_access_key_id: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
  TF_VAR_aws_region: "ap-northeast-1"
  TF_VAR_domain_name: "ymnk.fun"
  TF_VAR_app_name: "tf-app"
  TF_VAR_db_name: "app-db"
  TF_VAR_db_username: "root"
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_master_key: ${{ secrets.MASTER_KEY }}
  TF_VAR_db_database: "database"


permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup tfcmt
        env:
          TFCMT_VERSION: v4.2.0
        run: |
          wget "https://github.com/suzuki-shunsuke/tfcmt/releases/download/${TFCMT_VERSION}/tfcmt_linux_amd64.tar.gz" -O /tmp/tfcmt.tar.gz
          tar xzf /tmp/tfcmt.tar.gz -C /tmp
          mv /tmp/tfcmt /usr/local/bin
          tfcmt --version

      - name: Assume Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ env.OIDC_ARN }}
          aws-region: ap-northeast-1

      - name: Terraform Format
        id: fmt
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        working-directory: ./terraform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tfcmt plan -patch -- terraform plan -no-color -target=module.ecr -input=false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        working-directory: ./terraform
        run: exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./terraform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tfcmt apply -- terraform apply -auto-approve -target=module.ecr -input=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Assume Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ env.OIDC_ARN }}
          aws-region: ap-northeast-1

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Build and push(tf-app)
        uses: docker/build-push-action@v3
        with:
          push: true
          file: backend/prd/Dockerfile
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build and push(nginx)
        uses: docker/build-push-action@v3
        with:
          push: true
          file: backend/prd/nginx/Dockerfile
          tags: |
            ${{ env.ECR_REGISTRY }}/nginx:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./terraform/ecs_rails/container_definitions.json
          container-name: ${{ env.APP }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.APP }}
          cluster: ${{ env.APP }}
          wait-for-service-stability: true